/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  Car,
  CarLengthAwarePaginator,
  GarageUser200
} from './schemas';

export type garageCarResponse200 = {
  data: Car
  status: 200
}
    
export type garageCarResponseComposite = garageCarResponse200;
    
export type garageCarResponse = garageCarResponseComposite & {
  headers: Headers;
}

export const getGarageCarUrl = (car: string,) => {


  

  return `http://localhost:8080/api/garage/cars/${car}`
}

export const garageCar = async (car: string, options?: RequestInit): Promise<garageCarResponse> => {
  
  const res = await fetch(getGarageCarUrl(car),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: garageCarResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as garageCarResponse
}



export type garageCarsResponse200 = {
  data: CarLengthAwarePaginator
  status: 200
}
    
export type garageCarsResponseComposite = garageCarsResponse200;
    
export type garageCarsResponse = garageCarsResponseComposite & {
  headers: Headers;
}

export const getGarageCarsUrl = () => {


  

  return `http://localhost:8080/api/garage/cars`
}

export const garageCars = async ( options?: RequestInit): Promise<garageCarsResponse> => {
  
  const res = await fetch(getGarageCarsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: garageCarsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as garageCarsResponse
}



export type garageUserResponse200 = {
  data: GarageUser200
  status: 200
}
    
export type garageUserResponseComposite = garageUserResponse200;
    
export type garageUserResponse = garageUserResponseComposite & {
  headers: Headers;
}

export const getGarageUserUrl = (user: string,) => {


  

  return `http://localhost:8080/api/garage/users/${user}`
}

export const garageUser = async (user: string, options?: RequestInit): Promise<garageUserResponse> => {
  
  const res = await fetch(getGarageUserUrl(user),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: garageUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as garageUserResponse
}
